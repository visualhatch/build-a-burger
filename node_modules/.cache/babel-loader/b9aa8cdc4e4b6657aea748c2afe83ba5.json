{"ast":null,"code":"import _objectSpread from \"/Users/DaveEvans/Dropbox/Documents/WebsiteFiles/localhost/REACT-complete-guide-PROJECT/burger-builder/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/DaveEvans/Dropbox/Documents/WebsiteFiles/localhost/REACT-complete-guide-PROJECT/burger-builder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/DaveEvans/Dropbox/Documents/WebsiteFiles/localhost/REACT-complete-guide-PROJECT/burger-builder/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/DaveEvans/Dropbox/Documents/WebsiteFiles/localhost/REACT-complete-guide-PROJECT/burger-builder/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/DaveEvans/Dropbox/Documents/WebsiteFiles/localhost/REACT-complete-guide-PROJECT/burger-builder/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/DaveEvans/Dropbox/Documents/WebsiteFiles/localhost/REACT-complete-guide-PROJECT/burger-builder/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/DaveEvans/Dropbox/Documents/WebsiteFiles/localhost/REACT-complete-guide-PROJECT/burger-builder/src/containers/Checkout/ContactData/ContactData.js\";\nimport React, { Component } from 'react';\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport axios from '../../../axios-orders';\nimport styles from './ContactData.module.css'; // import PropTypes from 'prop-types';\n\nvar ContactData =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ContactData, _Component);\n\n  function ContactData() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ContactData);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ContactData)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zip: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your ZIP Code'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 8\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your Email'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: ''\n        }\n      },\n      formIsValid: false,\n      loading: false\n    };\n\n    _this.orderHandler = function (event) {\n      event.preventDefault(); // console.log(this.props.ingredients);\n\n      _this.setState({\n        loading: true\n      });\n\n      var formData = {};\n\n      for (var formElementIdentifier in _this.state.orderForm) {\n        formData[formElementIdentifier] = _this.state.orderForm[formElementIdentifier].value;\n      }\n\n      var order = {\n        ingredients: _this.props.ingredients,\n        price: _this.props.price,\n        orderData: formData\n      };\n      axios.post('/orders.json', order).then(function (response) {\n        _this.setState({\n          loading: false\n        });\n\n        _this.props.history.push('/');\n      }).catch(function (error) {\n        _this.setState({\n          loading: false\n        });\n      });\n    };\n\n    _this.inputChangedHandler = function (event, inputIdentifier) {\n      var updatedOrderForm = _objectSpread({}, _this.state.orderForm);\n\n      var updatedFormElement = _objectSpread({}, updatedOrderForm[inputIdentifier]);\n\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = _this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      var formIsValid = false;\n\n      for (var inputIdentifiers in updatedOrderForm) {} // console.log(updatedFormElement);\n\n\n      _this.setState({\n        orderForm: updatedOrderForm\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ContactData, [{\n    key: \"checkValidity\",\n    value: function checkValidity(value, rules) {\n      var isValid = true;\n\n      if (rules.required) {\n        isValid = value.trim() !== '' && isValid;\n      }\n\n      if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n      }\n\n      if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid;\n      }\n\n      return isValid;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementsArray = [];\n\n      for (var key in this.state.orderForm) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.orderForm[key]\n        });\n      }\n\n      var form = React.createElement(\"form\", {\n        onSubmit: this.orderHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, formElementsArray.map(function (formElement) {\n        return React.createElement(Input, {\n          key: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          invalid: !formElement.config.valid,\n          shouldValidate: formElement.config.validation,\n          touched: formElement.config.touched,\n          changed: function changed(event) {\n            return _this2.inputChangedHandler(event, formElement.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187\n          },\n          __self: this\n        });\n      }), React.createElement(Button, {\n        btnType: 'Success',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, \"ORDER\"));\n\n      if (this.state.loading) {\n        form = React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: styles.ContactData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, \"Enter your Contact Data\"), form);\n    }\n  }]);\n\n  return ContactData;\n}(Component); // ContactData.propTypes = {};\n\n\nexport default ContactData;","map":{"version":3,"sources":["/Users/DaveEvans/Dropbox/Documents/WebsiteFiles/localhost/REACT-complete-guide-PROJECT/burger-builder/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","Button","Spinner","Input","axios","styles","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zip","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","loading","orderHandler","event","preventDefault","setState","formData","formElementIdentifier","order","ingredients","props","price","orderData","post","then","response","history","push","catch","error","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","checkValidity","inputIdentifiers","rules","isValid","trim","length","formElementsArray","key","id","config","form","map","formElement"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Button from '../../../components/UI/Button/Button';\n\nimport Spinner from '../../../components/UI/Spinner/Spinner';\n\nimport Input from '../../../components/UI/Input/Input';\n\nimport axios from '../../../axios-orders';\n\nimport styles from './ContactData.module.css';\n// import PropTypes from 'prop-types';\n\nclass ContactData extends Component {\n\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Street'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            zip: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your ZIP Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 8\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your Email'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 'fastest', displayValue: 'Fastest'},\n                        {value: 'cheapest', displayValue: 'Cheapest'}\n                    ]\n                },\n                value: ''\n            }\n        },\n        formIsValid: false,\n        loading: false\n    };\n\n    orderHandler = (event) => {\n        event.preventDefault();\n\n        // console.log(this.props.ingredients);\n\n        this.setState({loading: true});\n\n        const formData = {};\n\n        for (let formElementIdentifier in this.state.orderForm) {\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n        }\n\n        const order = {\n            ingredients: this.props.ingredients,\n            price: this.props.price,\n            orderData: formData,\n\n        };\n\n        axios.post('/orders.json', order)\n            .then(response => {\n                this.setState({loading: false});\n                this.props.history.push('/')\n            })\n            .catch(error => {\n                this.setState({loading: false})\n            });\n\n    };\n\n    checkValidity(value, rules) {\n\n        let isValid = true;\n\n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid;\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid;\n        }\n\n        return isValid;\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedOrderForm = {\n            ...this.state.orderForm\n        };\n        const updatedFormElement = {\n            ...updatedOrderForm[inputIdentifier]\n        };\n\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n        updatedFormElement.touched = true;\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n\n        let formIsValid = false;\n        \n        for (let inputIdentifiers in updatedOrderForm) {\n\n        }\n\n        // console.log(updatedFormElement);\n\n        this.setState({orderForm: updatedOrderForm});\n\n    };\n\n    render() {\n\n        const formElementsArray = [];\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            });\n        }\n\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementsArray.map(formElement => (\n                    <Input\n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)}/>\n                ))}\n\n                <Button btnType={'Success'}>ORDER</Button>\n            </form>\n        );\n\n        if (this.state.loading) {\n            form = <Spinner/>\n        }\n\n        return (\n            <div className={styles.ContactData}>\n                <h4>Enter your Contact Data</h4>\n                {form}\n            </div>\n        );\n    }\n}\n\n// ContactData.propTypes = {};\n\nexport default ContactData;"]},"metadata":{},"sourceType":"module"}