{"ast":null,"code":"import _objectSpread from \"/Users/daveevans/Dropbox/Documents/WebsiteFiles/localhost/REACT-complete-guide-PROJECT/burger-builder/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/daveevans/Dropbox/Documents/WebsiteFiles/localhost/REACT-complete-guide-PROJECT/burger-builder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/daveevans/Dropbox/Documents/WebsiteFiles/localhost/REACT-complete-guide-PROJECT/burger-builder/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/daveevans/Dropbox/Documents/WebsiteFiles/localhost/REACT-complete-guide-PROJECT/burger-builder/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/daveevans/Dropbox/Documents/WebsiteFiles/localhost/REACT-complete-guide-PROJECT/burger-builder/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/daveevans/Dropbox/Documents/WebsiteFiles/localhost/REACT-complete-guide-PROJECT/burger-builder/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/daveevans/Dropbox/Documents/WebsiteFiles/localhost/REACT-complete-guide-PROJECT/burger-builder/src/containers/Checkout/ContactData/ContactData.js\";\nimport React, { Component } from 'react';\nimport Button from '../../../components/UI/Button/Button';\nimport { connect } from \"react-redux\";\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport styles from './ContactData.module.css';\nimport axios from '../../../axios-orders';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../Store/actions/index'; // import PropTypes from 'prop-types';\n\nvar ContactData =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ContactData, _Component);\n\n  function ContactData() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ContactData);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ContactData)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zip: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your ZIP Code'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 8\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your Email'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: 'fastest',\n          validation: {},\n          valid: true\n        }\n      },\n      formIsValid: false\n    };\n\n    _this.orderHandler = function (event) {\n      event.preventDefault();\n      var formData = {};\n\n      for (var formElementIdentifier in _this.state.orderForm) {\n        formData[formElementIdentifier] = _this.state.orderForm[formElementIdentifier].value;\n      }\n\n      var order = {\n        ingredients: _this.props.ings,\n        price: _this.props.price,\n        orderData: formData\n      };\n\n      _this.props.onOrderBurger(order);\n    };\n\n    _this.inputChangedHandler = function (event, inputIdentifier) {\n      var updatedOrderForm = _objectSpread({}, _this.state.orderForm);\n\n      var updatedFormElement = _objectSpread({}, updatedOrderForm[inputIdentifier]);\n\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = _this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      var formIsValid = true;\n\n      for (var _inputIdentifier in updatedOrderForm) {\n        formIsValid = updatedOrderForm[_inputIdentifier].valid && formIsValid;\n      }\n\n      _this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formIsValid\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ContactData, [{\n    key: \"checkValidity\",\n    value: function checkValidity(value, rules) {\n      var isValid = true;\n\n      if (rules.required) {\n        isValid = value.trim() !== '' && isValid;\n      }\n\n      if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n      }\n\n      if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid;\n      }\n\n      return isValid;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementsArray = [];\n\n      for (var key in this.state.orderForm) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.orderForm[key]\n        });\n      }\n\n      var form = React.createElement(\"form\", {\n        onSubmit: this.orderHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, formElementsArray.map(function (formElement) {\n        return React.createElement(Input, {\n          key: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          invalid: !formElement.config.valid,\n          shouldValidate: formElement.config.validation,\n          touched: formElement.config.touched,\n          changed: function changed(event) {\n            return _this2.inputChangedHandler(event, formElement.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 181\n          },\n          __self: this\n        });\n      }), React.createElement(Button, {\n        btnType: 'Success',\n        disabled: !this.state.formIsValid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, \"ORDER\"));\n\n      if (this.props.loading) {\n        form = React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 197\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: styles.ContactData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, \"Enter your Contact Data\"), form);\n    }\n  }]);\n\n  return ContactData;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.orders.loading\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onOrderBurger: function onOrderBurger(orderData) {\n      return dispatch(actions.purchaseBurger(orderData));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","map":{"version":3,"sources":["/Users/daveevans/Dropbox/Documents/WebsiteFiles/localhost/REACT-complete-guide-PROJECT/burger-builder/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","Button","connect","Spinner","Input","styles","axios","withErrorHandler","actions","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zip","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ingredients","props","ings","price","orderData","onOrderBurger","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","checkValidity","setState","rules","isValid","trim","length","formElementsArray","key","push","id","config","form","map","formElement","loading","mapStateToProps","burgerBuilder","totalPrice","orders","mapDispatchToProps","dispatch","purchaseBurger"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Button from '../../../components/UI/Button/Button';\n\nimport {connect} from \"react-redux\";\n\nimport Spinner from '../../../components/UI/Spinner/Spinner';\n\nimport Input from '../../../components/UI/Input/Input';\n\nimport styles from './ContactData.module.css';\n\nimport axios from '../../../axios-orders';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\n\nimport * as actions from '../../../Store/actions/index';\n\n// import PropTypes from 'prop-types';\n\nclass ContactData extends Component {\n\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Street'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            zip: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your ZIP Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 8\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your Email'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 'fastest', displayValue: 'Fastest'},\n                        {value: 'cheapest', displayValue: 'Cheapest'}\n                    ]\n                },\n                value: 'fastest',\n                validation: {},\n                valid: true\n            }\n        },\n        formIsValid: false,\n    };\n\n    orderHandler = (event) => {\n        event.preventDefault();\n\n        const formData = {};\n\n        for (let formElementIdentifier in this.state.orderForm) {\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n        }\n\n        const order = {\n            ingredients: this.props.ings,\n            price: this.props.price,\n            orderData: formData,\n\n        };\n\n        this.props.onOrderBurger(order)\n\n    };\n\n    checkValidity(value, rules) {\n\n        let isValid = true;\n\n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid;\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid;\n        }\n\n        return isValid;\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedOrderForm = {\n            ...this.state.orderForm\n        };\n        const updatedFormElement = {\n            ...updatedOrderForm[inputIdentifier]\n        };\n\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n        updatedFormElement.touched = true;\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n\n        let formIsValid = true;\n        \n        for (let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        }\n\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\n\n    };\n\n    render() {\n\n        const formElementsArray = [];\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            });\n        }\n\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementsArray.map(formElement => (\n                    <Input\n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)}/>\n                ))}\n\n                <Button btnType={'Success'} disabled={!this.state.formIsValid}>ORDER</Button>\n            </form>\n        );\n\n        if (this.props.loading) {\n            form = <Spinner/>\n        }\n\n        return (\n            <div className={styles.ContactData}>\n                <h4>Enter your Contact Data</h4>\n                {form}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        loading: state.orders.loading\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onOrderBurger: (orderData) => dispatch(actions.purchaseBurger(orderData))\n    }\n};\n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));"]},"metadata":{},"sourceType":"module"}