{"ast":null,"code":"import _defineProperty from \"/Users/daveevans/Dropbox/Documents/WebsiteFiles/localhost/REACT-complete-guide-PROJECT/burger-builder/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/daveevans/Dropbox/Documents/WebsiteFiles/localhost/REACT-complete-guide-PROJECT/burger-builder/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/daveevans/Dropbox/Documents/WebsiteFiles/localhost/REACT-complete-guide-PROJECT/burger-builder/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/daveevans/Dropbox/Documents/WebsiteFiles/localhost/REACT-complete-guide-PROJECT/burger-builder/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/daveevans/Dropbox/Documents/WebsiteFiles/localhost/REACT-complete-guide-PROJECT/burger-builder/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/daveevans/Dropbox/Documents/WebsiteFiles/localhost/REACT-complete-guide-PROJECT/burger-builder/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/daveevans/Dropbox/Documents/WebsiteFiles/localhost/REACT-complete-guide-PROJECT/burger-builder/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/daveevans/Dropbox/Documents/WebsiteFiles/localhost/REACT-complete-guide-PROJECT/burger-builder/src/containers/Auth/Auth.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport * as actions from '../../Store/actions/index';\nimport styles from './Auth.module.css';\n\nvar Auth =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Auth, _Component);\n\n  function Auth() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Auth);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Auth)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your Email Address'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Your Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      }\n    };\n\n    _this.inputChangedHandler = function (event, controlName) {\n      var updatedControl = _objectSpread({}, _this.state.controls, _defineProperty({}, controlName, _objectSpread({}, _this.state.controls[controlName], {\n        value: event.target.value,\n        valid: _this.checkValidity(event.target.value, _this.state.controls[controlName].validation),\n        touched: true\n      })));\n\n      _this.setState({\n        controls: updatedControl\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Auth, [{\n    key: \"checkValidity\",\n    value: function checkValidity(value, rules) {\n      var isValid = true;\n\n      if (rules.required) {\n        isValid = value.trim() !== '' && isValid;\n      }\n\n      if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n      }\n\n      if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid;\n      }\n\n      return isValid;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementsArray = [];\n\n      for (var key in this.state.controls) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.controls[key]\n        });\n      }\n\n      var form = formElementsArray.map(function (formElement) {\n        return React.createElement(Input, {\n          key: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          invalid: !formElement.config.valid,\n          shouldValidate: formElement.config.validation,\n          touched: formElement.config.touched,\n          changed: function changed(event) {\n            return _this2.inputChangedHandler(event, formElement.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        className: styles.Auth,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, form, React.createElement(Button, {\n        btnType: 'Success',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"Submit\")));\n    }\n  }]);\n\n  return Auth;\n}(Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onAuth: function onAuth(email, password) {\n      return dispatch(actions.auth());\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/Users/daveevans/Dropbox/Documents/WebsiteFiles/localhost/REACT-complete-guide-PROJECT/burger-builder/src/containers/Auth/Auth.js"],"names":["React","Component","connect","Input","Button","actions","styles","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","inputChangedHandler","event","controlName","updatedControl","target","checkValidity","setState","rules","isValid","trim","length","maxLength","formElementsArray","key","push","id","config","form","map","formElement","mapDispatchToProps","dispatch","onAuth","auth"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\n\nimport {connect} from \"react-redux\";\n\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\n\nimport * as actions from '../../Store/actions/index';\n\nimport styles from './Auth.module.css';\n\nclass Auth extends Component {\n\n    state = {\n        controls: {\n            email : {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your Email Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true,\n                },\n                valid: false,\n                touched: false\n            },\n            password : {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Your Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false\n            },\n        }\n    };\n\n    checkValidity(value, rules) {\n\n        let isValid = true;\n\n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid;\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid;\n        }\n\n        return isValid;\n    }\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControl = {\n            ...this.state.controls,\n            [controlName]: {\n                ...this.state.controls[controlName],\n                value: event.target.value,\n                valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            }\n        };\n        this.setState({controls: updatedControl})\n    };\n\n    render() {\n        const formElementsArray = [];\n        for (let key in this.state.controls) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n            });\n        }\n\n        const form = formElementsArray.map(formElement => (\n           <Input\n               key={formElement.id}\n               elementType={formElement.config.elementType}\n               elementConfig={formElement.config.elementConfig}\n               value={formElement.config.value}\n               invalid={!formElement.config.valid}\n               shouldValidate={formElement.config.validation}\n               touched={formElement.config.touched}\n               changed={(event) => this.inputChangedHandler(event, formElement.id)}/>\n        ));\n\n\n        return (\n            <div className={styles.Auth}>\n                <form>\n                    {form}\n                    <Button btnType={'Success'}>Submit</Button>\n                </form>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      onAuth: (email, password) => dispatch(actions.auth())\n  }\n};\n\n\nexport default connect(null, mapDispatchToProps)(Auth);"]},"metadata":{},"sourceType":"module"}